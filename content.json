{"meta":{"title":"L空间","subtitle":"","description":"Keep going.","author":"longguzzz","url":"https://longguzzz.github.io","root":"/"},"pages":[{"title":"所有分类","date":"2022-08-01T07:41:59.289Z","updated":"2022-08-01T07:41:59.289Z","comments":true,"path":"categories/index.html","permalink":"https://longguzzz.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2022-08-01T12:54:32.702Z","updated":"2022-08-01T12:54:32.702Z","comments":true,"path":"about/index.html","permalink":"https://longguzzz.github.io/about/index.html","excerpt":"","text":"99年后生，毕业于机械工程专业，目前正在积极学习计算机相关的种种知识，磨炼相关能力~兴趣爱好广泛。了解稍微比较多的是泰拳，其他兴趣爱好暂时没法投入时间来发展，有待未来逐一解锁。"},{"title":"所有标签","date":"2022-08-01T07:42:47.193Z","updated":"2022-08-01T07:42:47.193Z","comments":true,"path":"tags/index.html","permalink":"https://longguzzz.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"【3】动车上看书【2023-01-03】","slug":"日知录/【3】动车上看书【2023-01-03】","date":"2023-01-02T16:00:00.000Z","updated":"2023-01-03T15:22:53.197Z","comments":true,"path":"日知录/【3】动车上看书【2023-01-03】/","link":"","permalink":"https://longguzzz.github.io/%E6%97%A5%E7%9F%A5%E5%BD%95/%E3%80%903%E3%80%91%E5%8A%A8%E8%BD%A6%E4%B8%8A%E7%9C%8B%E4%B9%A6%E3%80%902023-01-03%E3%80%91/","excerpt":"","text":"看书 看书用实体书，字大，任何地方都方便看，也便于笔记。 建立全局脉络，9合1打印更合适。首看与再看是不同的过程，首看时要字大，再看时要大缓存，方便快速回忆。 封闭于动车上，无他事，看书反而更快。 看书看累了，怎么办？什么都不做。即，不看短视频、不搞“休息活动”、不娱乐、拒绝无限时刷微信，只是最简单地趴着什么也不做，过一会儿休息好了重新继续看。这种方式，在长时间尺度上的吞吐量最大。关键在于，各种所谓的娱乐与休息只会消耗精神力，如果失控则会整块整块时间地耗散。 . 类似地，吃饭不看Bilibili等短视频平台上的视频，这样的时间段在心理感知上慢，在钟表上快。 看书做笔记，不贪图首次看就建立笔记体系。那种建构的体系是虚的，因为现实里，总是过一段时间后回看的总结更能把握要点、核心，从而能建立更合理的认识体系。 所以，第一次看只需要做脚手架笔记，非永久的，仅用于辅助临时的快速检索。 脚手架笔记，用5×5或者6×6的索引数即可。注意临时记忆的容量限制，该断则断。 每一页重计索引数，足矣。首看不需要花时间考虑怎么样划分与建构体系，每一页有索引数即可。 不应该立即把笔记做到机器上，即，不应该看几页就做笔记。看书的时间应该用来不断拷问自己，不会就回翻重看，最后能心有脉络。由于有索引数，所以可以快速定位。 不吝啬时间来在稿纸上做简易笔记。比如梳理图表。 不想看了或累了，就不看。可以在不同的书之间换脑。足够明智的人会选择追求最大吞吐量，而不是“最快刷完一本书”的兴奋感。 一两章内容看完后，再给自己出一张高浓缩度的试卷，比如代码解释题。或者做一个总结图。这时候也可以考虑扫描草稿。另一种方式就是通过后面的课程来驱动前面知识的应用、复习。 建立自己的综合认知框架。这样的话才敢在看同一个主题的不同书时，能够有所取舍，这样速度才会快。例：C++不同的书重复的内容很多。 看书实速与心理时间感知 10分钟量级，看2到4页，觉得快。 1小时量级，通常则12页到15页。慢则6页，快则18到20页。觉得慢。 2小时，通常25页到30页。慢则12页，快则35到40页。心理上觉得超慢。别人可能出去一趟回来了，或者过了半个上午，自己却只推进了不到一章。 10小时一整天，常速可以125页。感觉是正常速度，因为一整天其他什么事也不干，全用在看书上了。 两个整天，250页。心理感觉是，真快！因为这意味着，一个周末的时间，小书直接就看完了，大书的话也能看个半本，厚书也算接近完成1&#x2F;4 第一道难关，在于看了2小时感觉没进度的沮丧。但如果马上就要用、带着问题与好奇去找知识，就能度过漫长的2小时。但是要2天20小时，就有点难了。进度表+番茄钟间隔休息+换脑换书+不按特定顺序看+先看感兴趣的和要用的+笔记标记+只看当前页而不一直往后翻，则2天20小时也很有可能。 在不同时间量级上，心理时间感知效果与实际的看书积累量存在着微妙的错位匹配。眼光长远的人会追求最大吞吐量，而不是最快响应时间（“我看完了一本书”）。 有挑战的问题是否有可能做到每天稳定看100页书呢？","categories":[{"name":"日知录","slug":"日知录","permalink":"https://longguzzz.github.io/categories/%E6%97%A5%E7%9F%A5%E5%BD%95/"}],"tags":[{"name":"2023-01","slug":"2023-01","permalink":"https://longguzzz.github.io/tags/2023-01/"}]},{"title":"【2】观测能力制约认知水平【2023-01-02】","slug":"日知录/【2】观测能力制约认知水平【2023-01-02】","date":"2023-01-01T16:00:00.000Z","updated":"2023-01-02T14:42:29.552Z","comments":true,"path":"日知录/【2】观测能力制约认知水平【2023-01-02】/","link":"","permalink":"https://longguzzz.github.io/%E6%97%A5%E7%9F%A5%E5%BD%95/%E3%80%902%E3%80%91%E8%A7%82%E6%B5%8B%E8%83%BD%E5%8A%9B%E5%88%B6%E7%BA%A6%E8%AE%A4%E7%9F%A5%E6%B0%B4%E5%B9%B3%E3%80%902023-01-02%E3%80%91/","excerpt":"","text":"观测能力如何制约认知水平？调试内核代码有感：对gdb调试掌握不熟练，会极大地阻碍“观测-思考-行动-反馈”循环，在正确性、速度、心理动力等一系列维度阻碍写代码。 仔细一想，“观测-思考-行动-反馈”循环起于观测、回于反馈，而常言中以强调思考和行动者居多。 这重要却模糊的地方，该探索思考 控制理论，可以提供一套更复杂的类比。而且看得见摸得着的物理结构似乎更有可操作性。 eval和apply循环，在环境中实现自身的递归定义、自我解释。“观测-思考-行动-反馈”也是在环境里递归构造自我。eval&#x2F;apply构建的解释器多种多样，相比之下，“观测-思考-行动-反馈”的描述则模糊得异常。 这样的异常，在人生其他维度里还有多少？视而不见，听而不闻，或许是因为无法有意识地识别信息流里的模式。假如有意识地改造，要如何才能改得足够敏锐？ 先用“观测-思考-行动-反馈”循环来改造“观测-思考-行动-反馈”循环。重点方向：写代码、学习方式、关于人的认知。 改造“观测-思考-行动-反馈”循环的启示使用 调研-设计-写码-调试。启示：如果知道可用的工具有哪些，那么在没有发明新工具的情况下，工具的选择与使用能力也是一大要事。 定理证明。启示：知道不等于理解、不等于会用。即使知道同样的基础操作，并不意味着能想到怎么解决问题。 知识索引与组织。启示：知识无法检索和提取，就像钱不知道借给了谁，这种情况下的钱不会在交易中被认可。 产业实际问题、源码、博客、教科书、lab与demo。启示：从创生、流动、噪声等角度思考，很有意思。 改造方向 望远镜。启示：可以改造精度。另一启示：牛顿与胡克的望远镜之别，说明工具本身的制作也很重要。 监控。启示：自动化观测。 性质与意义 中医与胃镜、肠镜。启示：多一种观测工具，则可以多一条反馈验证循环的通路。另一启示：成本制约。 显微镜、化学试剂、高精度天平。启示：新的工具可能意味着知识新世界。另一启示：一些论断需要高精度的观测工具提供证明。 双缝干涉。启示：观测与事实的相互影响。 考古文物与历史。启示：文物中提取的历史信息和文字构建的历史，二者在认知真实世界的重要性上差别极大。 诈骗的信息流。启示：系统偏差、相互印证、自恰与体系排斥。又想到《语言、真理与逻辑》所言，以及科学共识的变化方式。 他山之石，可以攻玉。启示：每一种额外的知识储备，在找到沟通点之后，可以成体系地转换出启发思路。 其他有意思的问题 人如何发现未知的他人？人如何观测他人？有什么观测方法？ 人如何观测自己？有什么观测方法？ 潜在的论域？ 如何观测一个组织？ 抽象世界的观测如何改造精度？已有多少通路？习惯与机器自动化？ 观测如何影响事实本身？ 是匮乏还是超载？怎么探寻、选择与加工……？ 在溯源工作结束后，已形成的认知体系还会有哪些性质浮现出来？ 观测怎么导向行动？正确的观测能否导向正确的行动？系统偏差的观测如何导向系统偏差的行动？ 是否存在锁死困局？人是否可能意识到自己在何种意义上被锁在了某个困局？如何清醒？ 提问时怎么发现不知道的应该知道之事？行动如何带来变数？事实是以何种方式打破“提问-自己解决”循环的？* 怎么样是一个封闭的运算系统？ 一些行动思路 现有的各种学习方法中的信息流以及其间的“观测-思考-行动-反馈”循环，需要系统地改造优化。 了解行业历史，可能有比想象中更丰富的途径。 尽早参与多个领域的实际工作，这样才有实际的问题来练手如何解决。从局势创生与变化的角度而言，接触到行业高手或许更容易发现变局中的有效变量、格局运转背后的规则或规律。有空可能还需要看一些管理学的书。 可能最好补充一点抽象代数的知识。整理一下科学技术史、科学哲学世界观的知识。","categories":[{"name":"日知录","slug":"日知录","permalink":"https://longguzzz.github.io/categories/%E6%97%A5%E7%9F%A5%E5%BD%95/"}],"tags":[{"name":"2023-01","slug":"2023-01","permalink":"https://longguzzz.github.io/tags/2023-01/"}]},{"title":"【1】兔年开启修行【2023-01-01】","slug":"日知录/【1】兔年开启修行【2023-01-01】","date":"2022-12-31T16:00:00.000Z","updated":"2023-01-02T14:31:59.070Z","comments":true,"path":"日知录/【1】兔年开启修行【2023-01-01】/","link":"","permalink":"https://longguzzz.github.io/%E6%97%A5%E7%9F%A5%E5%BD%95/%E3%80%901%E3%80%91%E5%85%94%E5%B9%B4%E5%BC%80%E5%90%AF%E4%BF%AE%E8%A1%8C%E3%80%902023-01-01%E3%80%91/","excerpt":"","text":"日知录一年半了，时间无情，已是2023。2023是兔年，联系一下现实，恰如龟兔赛跑。 兔子的第一弱点：无法理解乌龟究竟在什么层面、什么意义上更快。这是观察能力在一整个维度上的缺失。糟糕的是，缺失的不仅是对他者的观察能力，还有对自我的观察能力：兔子不仅仅是不知道一起比赛的乌龟比自己快，而且还不知道自己其实很慢。更严重的是，在缺乏自我观察能力的同时，还滋生了幻觉，并且让幻想影响了决策：兔子还不知道自己不仅很慢，而且误以为自己很快。在这种自以为速度快的幻觉下，兔子已经深深地自我催眠，被自我给反锁在了白日梦中：“我一旦醒来，就能追上。”这样的自我麻醉已经深入脑髓，侵入到了中枢神经系统的每个角落。时间再长下去，恐怕就连肌肉也要开始萎缩了。 “假如兔子醒来，而且变得比乌龟更疯狂？”这就是典型的兔子幻想。切记，这类想法有毒。自以为是兔子的人，总会幻想自己有了乌龟的稳定输出能力会发生什么。而乌龟并不反向幻想自己会如何蹦蹦跳跳，它只是在堡垒中一步一步前进。对于兔子而言，只有当兔子明白：“我跑不了那么快，我实际上只能跑……，所以我应该……，然后要……”的时候，只有兔子认真考察“用30天的尺度来看，自己的速度究竟如何？快吗？慢吗？”的时候，兔子才算刚刚启程。 总而言之，认真做好有效的事。踏实才能稳，稳才能由时间来积累效果。典型的例子就是，每天稳定积累8小时胜过一次发作14小时后中断数天。900页的书，每天稳定看60页比一天看120页然后休息四五天要更好。 所以，日知录，关键在于没有借口地稳定持续前进，关键在于时间的力量。 什么叫“认真做事”？《张一鸣：我遇到的优秀年轻人的5个特质》 “工作前两年，我基本上每天都是十二点一点回家，回家以后也编程到挺晚。确实是因为有兴趣，而不是公司有要求。” “当时我负责技术，但遇到产品上有问题，也会积极地参与讨论、想产品的方案。很多人说这个不是我该做的事情。但我想说：你的责任心，你希望把事情做好的动力，会驱动你做更多事情，让你得到很大的锻炼。” 《张一鸣：成功与否并非创业的根本原因》，2014年，张一鸣做客财视传媒《超级脱口》节目的讲话 其实，我并非从大学毕业后就一直创业，2008年，我曾入职微软。在很多人眼里，微软是一个很不错的公司，也是很多年轻人梦寐以求想进去的公司。所以，我选择离开就更难让人理解了，他们会猜测是不是在微软有一些东西束缚了我，或者说是我在微软有过不愉快的工作经历? 实际上，我在微软并没有什么不好的东西，大家真的是想多了。我只能说不同的人有不同的追求，对公司的期望值也是不一样的。所以，无论多么好的公司都会有人选择留下来，有人选择离开，我觉得这是正常的。至于我为什么离开微软，可以简单得用两个字概括一一无聊。 我在微软工作期间，基本上是半天看书，半天工作，并没有很多具有挑战的事情去做。很多时候都是比较清闲的，而这种工作状态却不是我想要的。有很多想做的事我并不能去做，因为我不能在工作的时间做大量自己的事情，而在这种情况下，我就会感到很无聊，做事没有挑战性，没有激情。 不过，幸好有那段比较清闲的时间，我才有机会看了很多书，像稻盛和夫的《活法》、《The Seven Habits of Highly Effective People》，还有《TheFive Dysfunctions of a Team》等等，前两本书对我影响很大。 除了爱抠手机，我的本职工作就是对着电脑写代码。我是一个技术宅男，幕后工作是我的强项，我也很享受这个过程，直到现在也是这样的。以至于我给员工们的印象都是“一个没什么爱好的‘码农宅男’”，每当他们这样说我时，我就感到很委屈：我有爱好的，我的爱好是获取信息！ 创业以后，因为工作需要，我必须从台后走到台前，对于这个转变，我有些不习惯、不适应，我仍然喜欢做默默无闻的角色。一般对于采访，我都有点逃避。前些天，我还跟几个同事讨论技术问题，一直讨论到十二点半，我好久都没有参与讨论技术问题了，我想念这样的状态。技术攻坚的好处，是你可以把想法到实现更完整地贯通，从你提出想法开始，到设计编码上线，整个过程你都可以非常惊喜地参与，非常惊喜地把你的想法实现。这个过程对我来说，是一种享受，是一种惊喜，更是一种成就。但是，我不能总沉浸在这种惊喜和成就感之中，随着公司发展得越来越大，我需要更多的人来配合做这件事，只有这样，我才能腾出时间跟外界有更多的交流，获得更多的信息输入，这对我来说非常有帮助，对公司的发展也有利。所幸，我拥有一个非常棒的团队，来和我一起工作。 《南开校友、今日头条创始人张一鸣在2016级新生开学典礼上的讲话》 但我没沮丧很久，就慢慢地从安静朴素的校园和踏实努力的氛围中，找到了自己的节奏：我决定换专业，去软件工程。原因是，我发现相比于在面包板上做正弦波信号发生器，我对计算机更感兴趣。大一的时候，我就泡在“我爱南开”BBS网页开发技术版，用现在话来说，算小网红了。转专业第一天，发现软件工程的老师也都知道我。 我是想告诉大家，也许对你们其中的一些人来说也是一样，兴奋感褪去后，渐渐发现，大学生活不如自己想象的那般丰富和刺激。大学以前，我们按部就班的生活，没有太多自主选择。但大学开始，个人选择开始变得格外重要，越早认识到这一点，大学阶段的收获就越大。 说回到我的大学生活。其实，转院后，生活也没多大变化，依然是日复一日，图书馆啊，实验室啊。怎么面对枯燥的生活？ 看书。寂寞的大学生活，给了我人生最安静的阅读时光。不论是幽静的老图,温馨的泰达学院图书馆(我觉得是世界上最好的校园图书馆，真的很棒，你需要哪本书，只要在BBS上留个言，他们就会买回来，而且会买很贵的书，按美元计价的书)，还有高大上的泰达开发区图书馆（因为就在附近所以也常去蹭）。我用别人打游戏、打牌的时间，阅读了各种各样的书，或者说乱七八糟的书，包括各个专业的书，包括人物传记，也有各种境内外的报刊杂志。 看书看累了，我就到新开湖畔发个呆，或者在泰达公园散步，给自己列出各种各样与短期目标无关的问题来思考。这些问题对短期确实没有影响，但有这样的环境，去思考长期问题挺好的。 当然，那时候，我也有困惑，觉得看的这些东西和思考的问题都很有意思，但在生活中没什么用。直到后来我进入互联网行业并开始创业，各种各样的知识才发挥作用，帮我理解行业、理解管理，更快地掌握不熟悉的领域。 另外，不得不说，人物传记是非常好的心灵鸡汤。我读了很多人物传记，如果说有收获，就是发现那些伟大的人，在没有成为伟大的人之前，也是过着看起来枯燥的生活，每天都在做一些微不足道的事情，但这些事情最后从点连成线，成就了他们。 我毕业后参与创立了酷讯、饭否、99房、到现在的今日头条，每一段创业经历，都挺寂寞的，尤其在苦闷纠结的时候。前些年，创业环境还不像今天，一堆公司都在五道口华清嘉园、东升园创业，平时在居民楼里查资料，研究用户需求，敲代码，谁也不认识你，也可能你的想法都不错，但不会马上转化到产品上，你必须要承受那样的漫长时光的煎熬。现在回想，耐心非常重要，不仅是等待的耐心，还要有耐心做深入思考，还要有耐心地找到更多更好的合作伙伴。 所以我觉得，有些心智，确实需要在南开这样安静的环境里才能培养，比如耐心，比如踏踏实实做事，做事情不讲捷径，尽可能基于长期来做思考。创办今日头条至今，每天都面对很多诱惑，包括来自巨头很好的offer、天价的并购，我们都坚持住了。这离不开南开的熏陶，我时常想南开那么漫长的寂寞我都熬过来了，还怕什么，对吧。 《还好，张一鸣不是个书呆子》 张一鸣小时候特别喜欢看书，读初中那会儿，没有手机、互联网，他回忆说：“我初中时一周要读二三十份报纸，从本地报纸到《人民日报》，每一个字都不会放过。”从初中到刚工作那段时间，每周四下午他就有点高兴，因为能买到《南方周末》。 2006年3月，大学毕业折腾过短暂创业的张一鸣加入当时知名的公司酷讯。面试者认为，眼前的这个小伙子说话虽然结巴，会脸红，但技术不错，是个聪明人。张一鸣最开始只是个普通工程师，但工作第二年，他就开始管理四五十人的团队，成为技术委员会主席。至于为什么升职这么快，张一鸣给的理由是工作不分份内份外，啥都做。他经常加班，看了公司所有人提交的代码，搞定了其他人搞不定的bug，还跟着销售员一起见客户，学营销。 但到了2008年，张一鸣对酷讯的印象却是管理混乱和方向不明。公司就搜索业务争执不下，失去转型的机会；招聘的数量和质量都跟不上。福建老乡王兴抛出橄榄枝，但他不干，说是要先到大公司去学管理。2008年的春天，他加入了微软。在微软，这位技术工程师像个老干部，每天改改模块，工作只需要3、4个小时。几个月后，他觉得工作太无聊，离职，以技术合伙人身份加入王兴的饭否。 2008年的中国经历了5.12地震和奥运会，2008年的张一鸣从酷讯到微软再到饭否，连换了三个工作。在微软，为打发无聊，他看了不少书，等遇到超爱看书的王兴，他的阅读量大概有了一次飞跃。也就从2008年开始，他开始将自己的阅读痕迹留在豆瓣上。那年春天，他想读的一本书是《像外行一样思考，像专家一样实践》，那年的12月2号，他标记的已读图书就有8本，这些大概就是他大学读过的书。这些书里，有提升效率的《SEVEN HABITS OF HIGHLY EFFECTIVE PEOPLE》（高效能人士的七个习惯），有冯仑、王石、联想的企业传记，还有为饭碗镀金的专业教材。 2009年8月，饭否关闭，9月，张一鸣离开王兴，创立了九九房。跟王兴合作的一年时光，老大哥总会列书单给他。 那时，他26岁，想知道成功能否复制，就问王兴，有没有人同时做成两家世界500强的公司。王兴说，有个日本的企业家叫稻盛和夫。张一鸣在地摊上买了稻盛和夫的《活法》，书上说，人活着是修炼自己的灵魂。张一鸣觉得这话太虚了，看到中间，稻盛和夫认为努力工作、精进是一种修炼方式，他才感到认同。 离开王兴，张一鸣又读了一遍《UNIX环境高级编程》。之后任九九房CEO的两年多时间，他读了33本书，除了他一贯爱看的心理学书籍，大多是创业以及商业管理类。 去年，《财经》记者问张一鸣，对他个人影响最大的书是什么。他列了《活法》、《少有人做的路》、《高效人士的七个习惯》、《基础生物学》几本书。这些书，都是他在2022年以及之前看的书，后来都成为张一鸣的演讲灵感。去年媒体圈流传的《张一鸣10年面试2000个年轻人：混得好的都有这5种特质》跟《活法》的中心思想很类似。 几个特点大可以一口气搜来所有的文章，罗列分析上数十个特点。这种猛冲的行为便是兔子急躁的表现。宁愿一次只分析两三点，每个月牢牢把握住一两点。这样的行为才是兔子虚心学习的表现。【特点1】一年如果看了33本书，一个月是看3本左右。10天一本。一天在有大量工作，并且把工作做好的前提下，仍然能看40页左右的书。【特点2】因为兴趣而编程，整个过程是成就感驱动的享受。比如，“技术攻坚的好处，是你可以把想法到实现更完整地贯通，从你提出想法开始，到设计编码上线，整个过程你都可以非常惊喜地参与，非常惊喜地把你的想法实现。”比如，“工作前两年，我基本上每天都是十二点一点回家，回家以后也编程到挺晚。确实是因为有兴趣，而不是公司有要求。”比如，“至于我为什么离开微软，可以简单得用两个字概括一一无聊。”【特点3】耐心。“踏踏实实做事，做事情不讲捷径，尽可能基于长期来做思考。” 这个月就一个目标无他。不走捷径，下功夫磨炼系统编程、网络编程方面的技术。有点时间闲了，就享受阅读的过程。","categories":[{"name":"日知录","slug":"日知录","permalink":"https://longguzzz.github.io/categories/%E6%97%A5%E7%9F%A5%E5%BD%95/"}],"tags":[{"name":"2023-01","slug":"2023-01","permalink":"https://longguzzz.github.io/tags/2023-01/"}]},{"title":"信息行业发展简史","slug":"前端/000 信息行业简史","date":"2022-07-31T16:00:00.000Z","updated":"2022-08-02T03:22:10.036Z","comments":true,"path":"前端/000 信息行业简史/","link":"","permalink":"https://longguzzz.github.io/%E5%89%8D%E7%AB%AF/000%20%E4%BF%A1%E6%81%AF%E8%A1%8C%E4%B8%9A%E7%AE%80%E5%8F%B2/","excerpt":"（本文为0.1版，尚未完成，写偏的部分、混乱的部分待未来修改。时间紧迫，得先干别的事去……）本文目标： （作者才接触后端一小段时间，入门前端也不久，尝试以有限的经验，尽可能）搜集网络上对前端发展趋势的看法，并做出自己的思考。 结合历史发展的角度思考前端，以及，思考当新手完成基本技能训练之后，还可以有什么样的上升空间。","text":"（本文为0.1版，尚未完成，写偏的部分、混乱的部分待未来修改。时间紧迫，得先干别的事去……）本文目标： （作者才接触后端一小段时间，入门前端也不久，尝试以有限的经验，尽可能）搜集网络上对前端发展趋势的看法，并做出自己的思考。 结合历史发展的角度思考前端，以及，思考当新手完成基本技能训练之后，还可以有什么样的上升空间。 互联网发展历史首先要问这样一个问题：历史上的Web浪潮与变化究竟是怎么样的？不同的人从不同的角度去理解Web的变化。在这里根据维基百科，结合前端开发 20 年变迁史 - 知乎做一个简单的梳理。 切入点一：技术 万维网 - 维基百科，自由的百科全书构想起源（1989之前）： 1980年英国科学家蒂姆·伯纳斯-李 (Tim Berners-Lee) 构建ENQUIRE项目。这是一个类似维基百科的超文本在线编辑数据库。 蒂姆·伯纳斯-李于1989年在《关于信息化管理的建议》一文中提及ENQUIRE并且描述了一个更加精巧的管理模型。 万维网技术基础搭建（1989~1995）： 1990年他在瑞士CERN的工作期间编写了第一个网页浏览器。 1991年1月，网页浏览器向其他研究机构发行，并于同年8月向公众开放。 1991年底蒂姆·伯纳斯-李在一个名为HTML Tags的文件中提及**HTML**。 1993年，CGI（Common Gateway Interface）出现了，人们可以在后端动态生成页面。但是非常慢，所以人们从多方面着手改进：编写语言的升级、浏览器的升级、HTML的升级（1993年中期互联网工程任务组（IETF）发布首个HTML规范的提案）。 1994年，网景公司成立，发布了第一款商业浏览器Navigator。 1994年，PHP诞生。PHP能将动态的内容嵌入到HTML中，提升了编写页面的效率与可读性。 1994年10月，W3C小组成立开始制定一系列标准，并督促网络应用开发者和内容提供者遵循这些标准。 1994年，哈肯·维姆·莱和伯特·波斯合作设计CSS。他们在1994年首次在芝加哥的一次会议上第一次展示了CSS的建议。 1995年，JavaScript诞生了。JavaScript只用了10天设计，充满缺陷和瑕疵，其两大任务就是完善语言特性与提高性能。 1996年，微软发布VBScript的第一个版本1.0。只有IE浏览器能用VBScript。 1996年12月发表的CSS1。 1997 年，W3C 颁布CSS1.0版本 ，CSS1.0 较全面地规定了文档的显示样式，可分为选择器、样式属性、伪类 &#x2F; 对象几个部分。随即微软和网景公司的浏览器均能支持 CSS1.0。 1998年5月，W3C发表了CSS2 早于1999年， CSS3已经开始制订。 2001 年，微软发布了 IE6，在 Windows 普及的年代 2002年，IE6 浏览器占据了高达 80% 的市场 2003年，IE6 浏览器占领 95% 的市场 2006年10月推出了IE7 2006年，jQuery发布 2008年，Chrome发布，在最初的激增之后，使用率下降，直到2008年10月跌至0.69%的低点。然后再次开始上升，至2008年12月，Chrome再次超过了1%的门槛。 2009年3月推出了IE8 2009年5月28日，Node.js诞生 2009年，jQuery将Sizzle选择器引擎引入核心，取得压倒性的优势 2010年1月，一款名为npm软件包管理系统诞生 直到2011年6月7日，CSS 3 Color Module终于发布为W3C Recommendation。 W3C于2011年9月29日开始了设计CSS4。但直至2022年只有极少数的功能被部分网页浏览器支持 切入点二：商业思考这样的问题：中国互联网在信息行业发展的不同时代有哪些大佬？ 张一鸣在2008年从南开软件工程专业毕业的时候，互联网行业是什么大环境？ 王兴2001年于清华大学无线电专业毕业，2003年中断美国特拉华大学博士学业回国创立校内网的时候，互联网行业是什么大环境？ 李彦宏 马云 马化腾 黄峥 谁被清理出了历史舞台？谁将会被清理出历史舞台？为什么？各个竞品之间的相互竞争历史？比如微视和抖音？不同创业者的重大决策？哪些当年很火的东西现在已经消失了？政策对互联网发展的影响？ 从这个历史变化的角度，对于前端的技术选型、应该学什么，有什么样的启示？ 大厂的思考方向、技术应用场景、历史。 HTML入门写法待办 在万维网诞生前的互联网历史以及行业状态 在互联网诞生前，信息行业的发展 中国互联网历史 大厂的技术公众号 一些技术方面的重大事故 参考资料 互联网 - 维基百科，自由的百科全书 万维网 - 维基百科，自由的百科全书 HTML - 维基百科，自由的百科全书 层叠样式表 - 维基百科，自由的百科全书 VBScript - 維基百科，自由的百科全書 前端开发 20 年变迁史 - 知乎 Node.js - 维基百科，自由的百科全书 2022 年前端趋势的 6 个预测 万维网联盟 - 维基百科，自由的百科全书 css发展历史 - Google 搜索 CSS 二十年发展简史 - 掘金 Internet Explorer 6 - 维基百科，自由的百科全书 jQuery - 维基百科，自由的百科全书 Google Chrome - 维基百科，自由的百科全书 移动互联网 历史 - Google 搜索 中国互联网25年变迁：两次跃迁，四次浪潮，一次赌未来 | 人人都是产品经理 1994-2018年，中国互联网发展历程！ - 知乎 中国互联网20年简史（1998-2018）：其中的规律与本质是什么？-T媒体 全球互联网50年：发展阶段与演进逻辑 - 安全内参 | 决策者的网络安全知识库 本文历史轨迹 2022-08-01 0.1版本 内容从技术的角度观察了1990到2010的万维网发展历史。稍微看了一下互联网大佬的情况博客写作小结：往大的方向写的话，太耗时间，不是很值得。以后写作前要用SMART法则限定一下，尤其要限定时长、字数。时间是有限的。另一个方式就是，把主题限定一下，大主题分成几个小主题来完成。文章给出参考的资料集就可以了，事实的部分没有必要摘抄太多，只需要给出必要部分。只输出有价值的部分，节约时间。有价值的部分，指的是：提出并思考自己感兴趣的问题。比如，非常理的奇异点。推理所依据的事实信息出处。推理判断的逻辑。难获取的思考材料，主要是自己的整理和思考结果。比如，没有人思考过的内容就无法被搜索到。一些整理性质的内容，如果有人想到并做过但是没有发表，那么也无法被搜索到。诸如此类。需要更有效地采集、聚合、管理信息。2个小时，阅读和写作，才写了大约1500字的内容，速度偏慢。需要重新设计写作方式。写到后面写偏了，从前端和技术开始往信息技术和全行业概况的方向上偏……可能需要专业人士的一些交流。","categories":[{"name":"技术-前端","slug":"技术-前端","permalink":"https://longguzzz.github.io/categories/%E6%8A%80%E6%9C%AF-%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"历史-技术","slug":"历史-技术","permalink":"https://longguzzz.github.io/tags/%E5%8E%86%E5%8F%B2-%E6%8A%80%E6%9C%AF/"},{"name":"行业-互联网","slug":"行业-互联网","permalink":"https://longguzzz.github.io/tags/%E8%A1%8C%E4%B8%9A-%E4%BA%92%E8%81%94%E7%BD%91/"},{"name":"商业-创业","slug":"商业-创业","permalink":"https://longguzzz.github.io/tags/%E5%95%86%E4%B8%9A-%E5%88%9B%E4%B8%9A/"}]},{"title":"前端技术初步","slug":"前端/010 前端技术初步","date":"2022-07-31T16:00:00.000Z","updated":"2022-08-01T14:56:44.040Z","comments":true,"path":"前端/010 前端技术初步/","link":"","permalink":"https://longguzzz.github.io/%E5%89%8D%E7%AB%AF/010%20%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E5%88%9D%E6%AD%A5/","excerpt":"HTML+CSS+简单的JS基础入门，包含一些学习方案的想法和基础知识点小结","text":"HTML+CSS+简单的JS基础入门，包含一些学习方案的想法和基础知识点小结 前端入门学习方案（以下为个人观点，正确性有待商榷） 知识点相对零散，逻辑关联弱，体系性弱。（至少不像操作系统开发那样系统，也不像计网一样有那么多层层层层层层层）。由于直接面向用户，其变化背后的逻辑是应用需求的快速变化。人们产生了什么应用需求，前端工程师就做一种相对直观的开发，浏览器厂商就在相应需求上抽象出什么样的功能，W3C就往相应的方向设计标准。知道HTML标签数量的历史变化，显示中使用频率的分布情况，就会明白正确的学习大方向。根据amdahl法则，应该把主要的时间用来学主要部分。切忌买HTML的书，对于非职业前端开发来说更是如此…… 写太长了，没必要花太多时间写这么长，之后写短一些…… 学习方式： 时间有限，不学没必要学的内容，不做没必要做的事情。 怎么高效动手：基本编辑方法，如何在一些编辑器里，用Emmet快捷写代码，snippet快捷写码 怎么专业地解决问题：专业参考资料如MDN等，chrome的调试方法 怎么有效地积累项目经验： 预估掌握技能点需要学什么，做好计划和安排 找到合适的项目，上手 内容重点： HTML和CSS的效果直观，效果传递的逻辑链短。 关键在建立知识分类框架、视觉直观经验、足够的间隔练习。整体上，刻画一个正确的大致轮廓，而后应靠动手在框架中补细节，再依靠间隔重复慢慢累积经验。 从应用的需求匹配学习的内容，术语和专业表述的部分通过MDN学。 不要深入旧东西的细节。比如，像是IE兼容性这些，花时间弄这些不如研究一下历史。 html基本数据结构。树的各节点及属性是什么，以及表达的语法。 html和CSS，积累视觉效果和代码的对应关系经验，积累相应特性可以应用在什么场景的认知。 写写写。这部分的开发主要依靠肌肉记忆、感知能力，对正确性的要求不像算法、并发编程这些。所以关键是写到熟。（看到熟也不行。） JS开发。 JS的整体设计缺陷臭名昭著，虽然语法简单上手快，坑会很多。JS部分不错。或许可以整理一份“怪异表”，然后在需要排错的时候参考。通过反复练习，学会这些边边角角的东西。 JS应该尽量按现代的方式使用，这样相对而言不会太痛苦，。旧的糟粕部分应该淘汰，只使用js的一部分子集。JS的新标准语法，正确使用姿势，在项目中练主流框架，熟悉基本的开发流程。 关键点在于，怎么样通过React, Vue和NodeJS减少开发的复杂度。 往深一点，学会依据框架背后的设计思想正确使用框架，提高开发速度，提升性能效果。 越快进入React, Vue, NodeJS项目的开发越好。 HTML基本内容内容框架：（Emmet一个感叹号） 123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;/body&gt;&lt;/html&gt; （概念过一遍后，用自己的话默写练习一遍，再纠正一遍，熟悉概念：） 整个文件的元数据：title标题，style直接写样式表，link引入外部资源。base设置根基址，meta是其他元信息，细节之后看。 整个文件的结构：html根，base根URL，head配置元信息、body放内容。 给内容划分结构方面语义的标签： header、main、footer和aside分出和视觉匹配的逻辑结构； article、section、nav分出内容结构； div、span圈定或者分隔出内容整体； hr水平线、br换行进行分割； 文本内容，配合整体语义标注： p段落、ol有序列表、ul有序列表、li列表项、dl描述列表、dt术语、dd描述项； blockquote块引用、quote引用；table表格、tr行、th表头、td是table data；colgroup列组、col列、caption标题； pre保留空格、code代码显示 内容细节标注的语义：h1~h6标题、a可跳转、em强调、strong重要、s删除线 图像和多媒体内容：audio音频、img或picture图片、video视频、svg矢量图、math数学公式 数据和交互 脚本：canvas画布，script主要是JS脚本 数据交互的表单：form整体表单、input提交的数据项、label说明提交数据项的标签、button提交按钮；select和datalist选择列表、option选项、optgroup选项分组；textarea一大块写文本区域 1、2、6主要是文件、交互相关的内容，适合web的场景，换一块地方可能就失效了；3、4、5偏内容资源，就内容的层面上来说，这些资源可以转移到其他桌面应用中。 所有标签都有的属性： 样式相关的class, style, hidden 控制相关的 id, contenteditable, tabindex 还有一个方面的 title 参考资料 HTML 元素参考 - HTML（超文本标记语言） | MDN 本文历史轨迹 2022-08-01 0.1版本 接下来一段时间怎么学前端。加入初级的HTML内容","categories":[{"name":"技术-前端","slug":"技术-前端","permalink":"https://longguzzz.github.io/categories/%E6%8A%80%E6%9C%AF-%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"https://longguzzz.github.io/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://longguzzz.github.io/tags/CSS/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://longguzzz.github.io/tags/JavaScript/"}]}],"categories":[{"name":"日知录","slug":"日知录","permalink":"https://longguzzz.github.io/categories/%E6%97%A5%E7%9F%A5%E5%BD%95/"},{"name":"技术-前端","slug":"技术-前端","permalink":"https://longguzzz.github.io/categories/%E6%8A%80%E6%9C%AF-%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"2023-01","slug":"2023-01","permalink":"https://longguzzz.github.io/tags/2023-01/"},{"name":"历史-技术","slug":"历史-技术","permalink":"https://longguzzz.github.io/tags/%E5%8E%86%E5%8F%B2-%E6%8A%80%E6%9C%AF/"},{"name":"行业-互联网","slug":"行业-互联网","permalink":"https://longguzzz.github.io/tags/%E8%A1%8C%E4%B8%9A-%E4%BA%92%E8%81%94%E7%BD%91/"},{"name":"商业-创业","slug":"商业-创业","permalink":"https://longguzzz.github.io/tags/%E5%95%86%E4%B8%9A-%E5%88%9B%E4%B8%9A/"},{"name":"HTML","slug":"HTML","permalink":"https://longguzzz.github.io/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"https://longguzzz.github.io/tags/CSS/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://longguzzz.github.io/tags/JavaScript/"}]}